#!/usr/bin/env -S deno run --unstable-kv -A

/**
 * SCRIPT FINAL COMPLETO Y ACTUALIZADO
 * Combina todas las partes y ejecuta la poblaci√≥n completa del sistema
 */

// Importar las funciones de las partes anteriores
import { createSprintsAndTasks, createRubricsSystem } from "./populate-complete-system-part2.ts";
import { createEvaluation, EvaluationStatus } from "../services/evaluationService.ts";
import { createConversation, createMessage, ConversationType } from "../models/message.ts";
import { createTaskComment } from "../models/task.ts";

// Funciones helper
function getRandomDate(daysAgo: number, daysFromNow = 0): number {
  const now = Date.now();
  const minDate = now - daysAgo * 24 * 60 * 60 * 1000;
  const maxDate = now + daysFromNow * 24 * 60 * 60 * 1000;
  return Math.floor(Math.random() * (maxDate - minDate) + minDate);
}

function randomChoice<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

export async function createEvaluationsSystem(tasks: any[], rubrics: any[], users: any[]) {
  console.log("\nüìä Paso 7: Creando sistema completo de evaluaciones...");

  const evaluations = [];
  const professors = users.filter(user => 
    user.role === "admin" || 
    user.role === "product_owner" || 
    user.role === "scrum_master"
  );

  // Obtener solo las tareas que son entregables
  const deliverableTasks = tasks.filter(task => task.isDeliverable);

  for (const task of deliverableTasks) {
    // Solo evaluar tareas completadas o en revisi√≥n
    if (task.status === "done" || task.status === "review") {
      const professor = randomChoice(professors);
      const rubric = randomChoice(rubrics);

      // Crear evaluaci√≥n con calificaciones realistas
      const scores = rubric.criteria.map((criterion: any) => {
        const level = randomChoice(criterion.levels);
        return {
          criterionId: criterion.id || crypto.randomUUID(),
          levelId: level.id || crypto.randomUUID(),
          points: level.pointValue,
          comments: `Evaluaci√≥n del criterio ${criterion.name}: ${level.description}`
        };
      });

      const totalScore = scores.reduce((sum: number, score: any) => sum + score.points, 0);
      const maxScore = rubric.criteria.reduce((sum: any, criterion: any) => sum + criterion.maxPoints, 0);

      const evaluationData = {
        deliverableId: task.id,
        rubricId: rubric.id,
        evaluatorId: professor.id,
        scores,
        totalScore,
        maxScore,
        feedback: `Evaluaci√≥n completa del entregable "${task.title}". El trabajo demuestra ${totalScore >= maxScore * 0.8 ? 'excelente' : totalScore >= maxScore * 0.6 ? 'buen' : 'regular'} nivel de calidad.`,
        status: randomChoice([EvaluationStatus.COMPLETED, EvaluationStatus.COMPLETED, EvaluationStatus.DRAFT]),
        submittedAt: getRandomDate(10, 0),
        evaluatedAt: getRandomDate(5, 0)
      };

      try {
        const evaluation = await createEvaluation(evaluationData);
        evaluations.push(evaluation);
        console.log(`‚úÖ Evaluaci√≥n creada para: ${task.title}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Error creando evaluaci√≥n para ${task.title}: ${error}`);
      }
    }
  }

  console.log(`\nüìä Total evaluaciones: ${evaluations.length}`);
  return evaluations;
}

export async function createMessagingSystem(projects: any[], users: any[]) {
  console.log("\nüí¨ Paso 8: Creando sistema de mensajes y conversaciones...");

  const conversations = [];
  const messages = [];

  for (const project of projects) {
    const teamMembers = [
      project.productOwner,
      project.scrumMaster,
      ...project.teamMembers
    ].filter(Boolean);

    if (teamMembers.length < 2) continue;

    // Crear conversaci√≥n del equipo
    const teamConversation = await createConversation({
      name: `Equipo ${project.name}`,
      type: ConversationType.GROUP,
      participants: teamMembers.map(member => member.id),
      createdBy: project.scrumMaster?.id || teamMembers[0].id,
      projectId: project.id
    });

    conversations.push(teamConversation);

    // Crear mensajes de ejemplo
    const sampleMessages = [
      "¬°Hola equipo! Bienvenidos al proyecto. Vamos a trabajar juntos para lograr nuestros objetivos.",
      "He revisado los requisitos del proyecto. ¬øPodemos programar una reuni√≥n para discutir la arquitectura?",
      "Sub√≠ la primera versi√≥n del dise√±o. Por favor revisen y comenten.",
      "¬øAlguien puede ayudarme con la integraci√≥n de la API? Tengo algunas dudas.",
      "Excelente trabajo en el √∫ltimo sprint. Sigamos as√≠ para el pr√≥ximo.",
      "Recordatorio: La demo del sprint es ma√±ana a las 2 PM.",
      "He actualizado la documentaci√≥n con los √∫ltimos cambios.",
      "¬øPodemos revisar juntos los casos de prueba antes de la entrega?",
    ];

    for (let i = 0; i < Math.min(sampleMessages.length, 5); i++) {
      const sender = randomChoice(teamMembers);
      const message = await createMessage({
        conversationId: teamConversation.id,
        senderId: sender.id,
        content: sampleMessages[i],
        timestamp: getRandomDate(15, 0)
      });

      messages.push(message);
    }

    console.log(`‚úÖ Conversaci√≥n creada para: ${project.name}`);

    // Crear algunas conversaciones privadas entre miembros
    for (let i = 0; i < Math.min(teamMembers.length - 1, 3); i++) {
      const participant1 = teamMembers[i];
      const participant2 = teamMembers[i + 1];

      const privateConversation = await createConversation({
        name: `${participant1.firstName} y ${participant2.firstName}`,
        type: ConversationType.DIRECT,
        participants: [participant1.id, participant2.id],
        createdBy: participant1.id
      });

      conversations.push(privateConversation);

      // Mensaje privado
      const privateMessage = await createMessage({
        conversationId: privateConversation.id,
        senderId: participant1.id,
        content: "Hola, ¬øpodemos coordinar mejor nuestras tareas para el pr√≥ximo sprint?",
        timestamp: getRandomDate(7, 0)
      });

      messages.push(privateMessage);
    }
  }

  console.log(`\nüìä Total conversaciones: ${conversations.length}`);
  console.log(`üìä Total mensajes: ${messages.length}`);
  return { conversations, messages };
}

export async function createTaskComments(tasks: any[], users: any[]) {
  console.log("\nüí≠ Paso 9: Creando comentarios en tareas...");

  const comments = [];

  for (const task of tasks) {
    // Solo agregar comentarios a algunas tareas (no todas)
    if (Math.random() > 0.6) continue;

    const project = task.project;
    const teamMembers = [
      project.productOwner,
      project.scrumMaster,
      ...project.teamMembers
    ].filter(Boolean);

    if (teamMembers.length === 0) continue;

    const sampleComments = [
      "Iniciando trabajo en esta tarea. Estimaci√≥n parece correcta.",
      "Encontr√© algunos desaf√≠os t√©cnicos. Podr√≠a necesitar m√°s tiempo.",
      "Complet√© la implementaci√≥n b√°sica. Lista para revisi√≥n.",
      "Agregu√© pruebas unitarias. Todo funcionando correctamente.",
      "Documentaci√≥n actualizada con los cambios realizados.",
      "Revis√© el c√≥digo. Se ve bien, solo algunos comentarios menores.",
      "Integraci√≥n completada exitosamente con el resto del sistema.",
      "Listo para demo. ¬øPodemos programar una revisi√≥n?",
    ];

    const numComments = Math.floor(Math.random() * 3) + 1;
    
    for (let i = 0; i < numComments; i++) {
      const commenter = randomChoice(teamMembers);
      const comment = randomChoice(sampleComments);

      try {
        const taskComment = await createTaskComment({
          taskId: task.id,
          userId: commenter.id,
          content: comment,
          timestamp: getRandomDate(20, 0)
        });

        comments.push(taskComment);
      } catch (error) {
        console.log(`‚ö†Ô∏è Error creando comentario: ${error}`);
      }
    }
  }

  console.log(`\nüìä Total comentarios: ${comments.length}`);
  return comments;
}

export async function generateSystemSummary(data: any) {
  console.log("\nüéâ ¬°SISTEMA COMPLETO POBLADO EXITOSAMENTE!");
  console.log("=============================================");
  console.log(`üë• Usuarios creados: ${data.users?.length || 0}`);
  console.log(`üìÅ Proyectos creados: ${data.projects?.length || 0}`);
  console.log(`üìù Historias de usuario: ${data.userStories?.length || 0}`);
  console.log(`üèÉ Sprints creados: ${data.sprints?.length || 0}`);
  console.log(`‚úÖ Tareas creadas: ${data.tasks?.length || 0}`);
  console.log(`üìã R√∫bricas creadas: ${data.rubrics?.length || 0}`);
  console.log(`üìä Evaluaciones creadas: ${data.evaluations?.length || 0}`);
  console.log(`üí¨ Conversaciones creadas: ${data.conversations?.length || 0}`);
  console.log(`üì® Mensajes creados: ${data.messages?.length || 0}`);
  console.log(`üí≠ Comentarios creados: ${data.comments?.length || 0}`);
  console.log("=============================================");
  
  console.log("\nüéØ FUNCIONALIDADES DISPONIBLES:");
  console.log("‚Ä¢ ‚úÖ Sistema de autenticaci√≥n y roles");
  console.log("‚Ä¢ ‚úÖ Gesti√≥n completa de proyectos");
  console.log("‚Ä¢ ‚úÖ Historias de usuario y sprints");
  console.log("‚Ä¢ ‚úÖ Tareas y entregables");
  console.log("‚Ä¢ ‚úÖ R√∫bricas especializadas (4 plantillas)");
  console.log("‚Ä¢ ‚úÖ Sistema completo de evaluaciones");
  console.log("‚Ä¢ ‚úÖ Mensajer√≠a y conversaciones");
  console.log("‚Ä¢ ‚úÖ Comentarios en tareas");
  console.log("‚Ä¢ ‚úÖ Dashboard personalizado por rol");
  console.log("‚Ä¢ ‚úÖ M√©tricas y reportes");
  
  console.log("\nüåê RUTAS PRINCIPALES PARA PROBAR:");
  console.log("‚Ä¢ http://localhost:8000/ - Dashboard principal");
  console.log("‚Ä¢ http://localhost:8000/projects - Gesti√≥n de proyectos");
  console.log("‚Ä¢ http://localhost:8000/my-tasks - Mis tareas asignadas");
  console.log("‚Ä¢ http://localhost:8000/evaluations - Sistema de evaluaciones");
  console.log("‚Ä¢ http://localhost:8000/rubrics - Gesti√≥n de r√∫bricas");
  console.log("‚Ä¢ http://localhost:8000/rubrics/list - Lista completa de r√∫bricas");
  console.log("‚Ä¢ http://localhost:8000/users - Gesti√≥n de usuarios (admin)");
  
  console.log("\nüë§ USUARIOS DE PRUEBA:");
  console.log("‚Ä¢ admin / admin123 - Administrador principal");
  console.log("‚Ä¢ prof.martinez / prof123 - Profesor");
  console.log("‚Ä¢ po.garcia / po123 - Product Owner");
  console.log("‚Ä¢ sm.fernandez / sm123 - Scrum Master");
  console.log("‚Ä¢ dev.perez / dev123 - Estudiante");
  
  console.log("\nüéä ¬°El sistema est√° listo para usar con datos completos!");
}
