#!/usr/bin/env -S deno run --unstable-kv -A

/**
 * SCRIPT MAESTRO ACTUALIZADO - SETUP COMPLETO DEL SISTEMA
 * 
 * Este script ejecuta TODOS los scripts de poblaci√≥n en el orden correcto
 * para crear un sistema completamente funcional con datos de ejemplo.
 * 
 * Ejecutar con: deno run --unstable-kv -A scripts/setup-complete-demo-updated.ts
 */

console.log("üöÄ CONFIGURACI√ìN COMPLETA DEL SISTEMA DEMO");
console.log("==========================================");
console.log("Este script ejecutar√° TODOS los scripts de poblaci√≥n:");
console.log("1. üë• Usuarios y proyectos b√°sicos");
console.log("2. üìã R√∫bricas especializadas");
console.log("3. üìä Evaluaciones completas");
console.log("4. üìà M√©tricas y datos adicionales");
console.log("==========================================\n");

async function setupCompleteDemo() {
  try {
    console.log("üîÑ Paso 1: Ejecutando poblaci√≥n b√°sica...");
    
    // Ejecutar el script de poblaci√≥n b√°sica
    const basicProcess = new Deno.Command("deno", {
      args: ["run", "-A", "--unstable-kv", "scripts/populate-everything.ts"],
      stdout: "inherit",
      stderr: "inherit",
    });
    
    const basicResult = await basicProcess.output();
    if (!basicResult.success) {
      throw new Error("Error en poblaci√≥n b√°sica");
    }
    
    console.log("\n‚úÖ Poblaci√≥n b√°sica completada");
    
    // Esperar un momento para que se procesen los datos
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log("\nüîÑ Paso 2: Ejecutando poblaci√≥n de r√∫bricas...");
    
    // Ejecutar el script de r√∫bricas
    const rubricsProcess = new Deno.Command("deno", {
      args: ["run", "-A", "--unstable-kv", "scripts/populate-rubrics.ts"],
      stdout: "inherit",
      stderr: "inherit",
    });
    
    const rubricsResult = await rubricsProcess.output();
    if (!rubricsResult.success) {
      console.log("‚ö†Ô∏è Advertencia: Error en poblaci√≥n de r√∫bricas, continuando...");
    } else {
      console.log("\n‚úÖ R√∫bricas pobladas exitosamente");
    }
    
    // Esperar un momento
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log("\nüîÑ Paso 3: Ejecutando poblaci√≥n de evaluaciones...");
    
    // Ejecutar el script de evaluaciones
    const evaluationsProcess = new Deno.Command("deno", {
      args: ["run", "-A", "--unstable-kv", "scripts/populate-evaluations.ts"],
      stdout: "inherit",
      stderr: "inherit",
    });
    
    const evaluationsResult = await evaluationsProcess.output();
    if (!evaluationsResult.success) {
      console.log("‚ö†Ô∏è Advertencia: Error en poblaci√≥n de evaluaciones, continuando...");
    } else {
      console.log("\n‚úÖ Evaluaciones pobladas exitosamente");
    }
    
    // Esperar un momento
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log("\nüîÑ Paso 4: Ejecutando poblaci√≥n de m√©tricas...");
    
    // Ejecutar el script de m√©tricas
    const metricsProcess = new Deno.Command("deno", {
      args: ["run", "-A", "--unstable-kv", "scripts/populate-metrics.ts"],
      stdout: "inherit",
      stderr: "inherit",
    });
    
    const metricsResult = await metricsProcess.output();
    if (!metricsResult.success) {
      console.log("‚ö†Ô∏è Advertencia: Error en poblaci√≥n de m√©tricas, continuando...");
    } else {
      console.log("\n‚úÖ M√©tricas pobladas exitosamente");
    }
    
    console.log("\nüéâ ¬°CONFIGURACI√ìN COMPLETA FINALIZADA!");
    console.log("=====================================");
    console.log("El sistema demo est√° completamente configurado con:");
    console.log("‚Ä¢ ‚úÖ Usuarios y roles diversos");
    console.log("‚Ä¢ ‚úÖ Proyectos con equipos completos");
    console.log("‚Ä¢ ‚úÖ Historias de usuario detalladas");
    console.log("‚Ä¢ ‚úÖ Sprints y tareas realistas");
    console.log("‚Ä¢ ‚úÖ R√∫bricas especializadas");
    console.log("‚Ä¢ ‚úÖ Evaluaciones con calificaciones");
    console.log("‚Ä¢ ‚úÖ M√©tricas y reportes");
    console.log("‚Ä¢ ‚úÖ Datos de ejemplo completos");
    console.log("=====================================");
    
    console.log("\nüåê RUTAS PRINCIPALES PARA PROBAR:");
    console.log("‚Ä¢ http://localhost:8000/ - Dashboard principal");
    console.log("‚Ä¢ http://localhost:8000/projects - Gesti√≥n de proyectos");
    console.log("‚Ä¢ http://localhost:8000/my-tasks - Mis tareas asignadas");
    console.log("‚Ä¢ http://localhost:8000/evaluations - Sistema de evaluaciones");
    console.log("‚Ä¢ http://localhost:8000/rubrics - Gesti√≥n de r√∫bricas");
    console.log("‚Ä¢ http://localhost:8000/rubrics/list - Lista completa de r√∫bricas");
    console.log("‚Ä¢ http://localhost:8000/users - Gesti√≥n de usuarios (admin)");
    
    console.log("\nüë§ USUARIOS DE PRUEBA:");
    console.log("‚Ä¢ admin / admin123 - Administrador principal");
    console.log("‚Ä¢ prof.martinez / prof123 - Profesor");
    console.log("‚Ä¢ po.garcia / po123 - Product Owner");
    console.log("‚Ä¢ sm.fernandez / sm123 - Scrum Master");
    console.log("‚Ä¢ dev.perez / dev123 - Estudiante");
    
    console.log("\nüöÄ PARA INICIAR EL SERVIDOR:");
    console.log("deno task start");
    
    console.log("\nüéä ¬°El sistema est√° listo para usar!");
    
  } catch (error) {
    console.error("‚ùå Error en la configuraci√≥n completa:", error);
    console.log("\nüîß SOLUCI√ìN DE PROBLEMAS:");
    console.log("1. Aseg√∫rate de que el servidor no est√© ejecut√°ndose");
    console.log("2. Ejecuta: deno run -A --unstable-kv scripts/clear-database.ts");
    console.log("3. Vuelve a ejecutar este script");
    throw error;
  }
}

if (import.meta.main) {
  await setupCompleteDemo();
}
